---
import fetchApi from "../../../lib/strapi";
import { SUPPORTED_LOCALES } from "../../../i18n/config";
import { loadDict } from "../../../i18n/utils";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { renderMarkdown } from "../../../lib/markdown";



const STRAPI_URL = import.meta.env.PUBLIC_STRAPI_URL;

function withBase(u?: string | null) {
  if (!u) return null;
  return u.startsWith("http") ? u : `${STRAPI_URL}${u}`;
}
function getFirstMediaUrl(m: any): string | null {
  if (!m) return null;
  if (Array.isArray(m)) return withBase(m[0]?.url ?? null);                      // v5 multi
  if (m?.url) return withBase(m.url);                                            // v5 single
  if (m?.data?.[0]?.attributes?.url) return withBase(m.data[0].attributes.url);  // v4 multi
  if (m?.data?.attributes?.url) return withBase(m.data.attributes.url);          // v4 single
  return null;
}

// Rutas para TODAS las locales
export async function getStaticPaths() {
  const blogs = await fetchApi<any[]>({
    endpoint: "blogs",
    wrappedByKey: "data",
    query: { fields: ["slug"], pagination: { pageSize: 500 } },
  });

  // Helper local (evita problemas de scope)
  function toEntity(x: any) {
    return x && "attributes" in x ? x.attributes : x;
  }

  return SUPPORTED_LOCALES.flatMap((lang) =>
    (blogs || [])
      .map(toEntity)
      .filter((a) => !!a?.slug)
      .map((a) => ({ params: { lang, slug: a.slug } }))
  );
}

const { lang, slug } = Astro.params as { lang: string; slug: string };
const dict = await loadDict(lang);

// Traer 1 post por slug
const posts = await fetchApi<any[]>({
  endpoint: "blogs",
  wrappedByKey: "data",
  query: { filters: { slug: { $eq: slug } }, populate: "*" },
});
const post = posts?.[0];

// Convierte post → attributes si viene como v4
const a = post && ("attributes" in post ? post.attributes : post);

// Imagen de portada
const cover = getFirstMediaUrl(a?.photo) ?? getFirstMediaUrl(a?.slider);

// HTML desde markdown
const html = renderMarkdown(a?.content);

---

<BaseLayout {lang} {dict}>
  <style >
  .md h2 { font-size: 1.5rem; font-weight: 700; margin: 1rem 0 .75rem }
  .md h3 { font-size: 1.25rem; font-weight: 600; margin: .75rem 0 .5rem }
  .md p  { margin: .5rem 0; line-height: 1.7 }
  .md hr { margin: 1rem 0; border-color: #e5e7eb }
</style>
  {post ? (
    <main class="container mx-auto max-w-3xl px-4 py-10">
      <article class="prose prose-neutral max-w-none prose-headings:font-semibold
               prose-h2:text-2xl prose-h3:text-xl
               prose-p:leading-relaxed
               prose-hr:my-6 md">
        {a?.category && (
          <p class="text-xs text-neutral-500 uppercase tracking-wide">{a.category}</p>
        )}
        <h1 class="!mb-2 text-7xl">{a?.title}</h1>
        {a?.description && <p class="text-neutral-600 text-3xl !mt-0">{a.description}</p>}
        {a?.date && (
          <p class="text-xs text-neutral-500">
            {new Date(a.date).toLocaleDateString()}
          </p>
        )}

        {cover && (
          <img src={cover} alt={a?.title} class="my-6 rounded-xl border" loading="eager" />
        )}

        <div class="prose-invert:prose" set:html={html} />
      </article>
    </main>
  ) : (
    <main class="container mx-auto max-w-3xl px-4 py-10">
      <p class="text-center text-neutral-500">Artículo no encontrado.</p>
    </main>
  )}
</BaseLayout>
