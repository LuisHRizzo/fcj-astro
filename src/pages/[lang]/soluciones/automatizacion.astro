---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import AutomatizacionHistoria from "../../../components/solutions/AutomatizacionHistoria.astro";
import ServiciosAutomatizacion from "../../../components/solutions/ServiciosAutomatizacion.astro";
import SolucionesAutomatizacion from "../../../components/solutions/SolucionesAutomatizacion.astro";
import DiferencialAutomatizacion from "../../../components/solutions/DiferencialAutomatizacion.astro";
import Involucrate from "../../../components/Involucrate.astro";

import { loadDict, getTrans } from "../../../i18n/utils";
import { getStaticLocalePaths } from "../../../i18n/paths";


export const getStaticPaths = getStaticLocalePaths;

const { lang = "es" } = Astro.params;
const dict = await loadDict(lang);
const t = (k: string, fb?: string) => getTrans(dict, k, fb);

// helper para arrays/objetos desde dict
function pick(path: string, fallback: any) {
  const segs = path.split('.');
  let cur = dict;
  for (const s of segs) cur = cur?.[s];
  return (cur ?? fallback);
}

// datos
const segTabs   = pick("solutions.secureTennet.segments.tabs", []);
const segItems  = pick("solutions.secureTennet.segments.items", []);
const features  = pick("solutions.secureTennet.features.items", []);
const tableCols = pick("solutions.secureTennet.segmentsTable.cols", []);
const tableRows = pick("solutions.secureTennet.segmentsTable.rows", []);
const diffs     = pick("solutions.secureTennet.diff.items", []);
---
<BaseLayout lang={lang} dict={dict}>
  <!-- HERO -->
  <section class="relative isolate overflow-hidden bg-neutral-900 text-white">
    <div class="container mx-auto max-w-7xl px-4 py-16 sm:py-20 lg:py-24">
      <p class="text-sm font-semibold text-white/80">
        {t("solutions.secureTennet.hero.overline")}
      </p>
      <h1 class="mt-3 text-4xl sm:text-5xl lg:text-6xl font-extrabold tracking-tight">
        {t("solutions.secureTennet.hero.title")}
      </h1>
      <p class="mt-5 max-w-3xl text-lg text-white/85">
        {t("solutions.secureTennet.hero.subtitle")}
      </p>
    </div>
    <div class="h-px w-full bg-neutral-300/30"></div>
  </section>

<!-- SEGMENTACIÓN (mensajes + CTAs por público) -->
<section class="py-8">
  <div class="container mx-auto max-w-7xl px-4">
    <!-- Tabs -->
    <div class="flex flex-wrap gap-2" role="tablist">
      {segTabs.map((label: string, i: number) => (
        <button
          type="button"
          role="tab"
          aria-selected={i === 0 ? "true" : "false"}
          aria-controls={`seg-panel-${i}`}
          data-seg-btn
          data-index={i}
          class={`px-3 py-2 text-sm border-b-2 transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-neutral-300
            ${i === 0
              ? "border-neutral-900 text-neutral-900 font-semibold"
              : "border-transparent text-neutral-700 hover:text-neutral-900 hover:border-neutral-300"
            }`}
        >
          {label}
        </button>
      ))}
    </div>

    <!-- Panel mensajes + CTAs -->
    <div class="mt-6 rounded-3xl border p-6 sm:p-8">
      {segItems.map((s: any, i: number) => (
        <div
          id={`seg-panel-${i}`}
          role="tabpanel"
          tabindex="0"
          class={i === 0 ? "" : "hidden"}
          data-seg-panel
          data-index={i}
        >
          <p class="text-sm font-semibold text-neutral-800">{s.tagline1}</p>
          <p class="mt-1 text-sm text-neutral-700">{s.tagline2}</p>
          <div class="mt-4 flex flex-wrap gap-3">
            <a href={`/${lang}/contacto/`} class="btn btn-primary" data-seg-primary>{s.primary}</a>
          </div>
        </div>
      ))}
    </div>
  </div>

  <script is:inline>
    (() => {
      const root = document.currentScript && document.currentScript.closest('section');
      if (!root) return;

      const btns = Array.from(root.querySelectorAll('[data-seg-btn]'));
      const panels = Array.from(root.querySelectorAll('[data-seg-panel]'));

      const makeInactive = (el) => {
        el.classList.remove('border-neutral-900','text-neutral-900','font-semibold');
        el.classList.add('border-transparent','text-neutral-700');
        el.setAttribute('aria-selected','false');
      };

      const makeActive = (el) => {
        el.classList.remove('border-transparent','text-neutral-700');
        el.classList.add('border-neutral-900','text-neutral-900','font-semibold');
        el.setAttribute('aria-selected','true');
      };

      btns.forEach((b) => {
        b.addEventListener('click', () => {
          const idx = b.getAttribute('data-index');

          // botones
          btns.forEach(makeInactive);
          makeActive(b);

          // panels
          panels.forEach((p) => p.classList.add('hidden'));
          const active = root.querySelector('[data-seg-panel][data-index="'+idx+'"]');
          if (active) active.classList.remove('hidden');
        });
      });
    })();
  </script>
</section>


  <!-- MENSAJE CLAVE -->
  <AutomatizacionHistoria {lang} dict={dict} />


  <!-- PROBLEMAS -->
  <ServiciosAutomatizacion {lang} dict={dict} />


  <!-- FUNCIONALIDADES -->
  <SolucionesAutomatizacion {lang} dict={dict} />

  <!-- DIFERENCIAL -->
   <DiferencialAutomatizacion {lang} dict={dict} />
   

   <!-- INVOLUCRATE -->
  <Involucrate {lang} {dict} />
 
</BaseLayout>

