---
import { getTrans } from "../../i18n/utils";

type Icon = "compass" | "bars" | "chain";
type Item = {
  icon: Icon;
  titleKey?: string;
  titleFallback: string;
  descKey?: string;
  descFallback: string;
};

type Props = {
  lang?: string;
  dict: any;
  sectionId?: string;
  overlineKey?: string;
  titleKey?: string;
  leadKey?: string;
  items?: Item[];
  ctaHref?: string;
  ctaKey?: string;
};

// Utilidad para leer anidado desde dict con fallback
const get = (path: string, fb: any) =>
  path.split(".").reduce((acc: any, k: string) => (acc && acc[k] != null ? acc[k] : null), Astro.props.dict) ?? fb;

// 1) Tomamos los problemas desde i18n
const problems: string[] = get("solutions.observability.problems.items", []);

// 2) Mapeamos problemas -> items con íconos por defecto
const iconCycle: Icon[] = ["compass", "bars", "chain"];
const mappedItems: Item[] = problems.map((p, i) => ({
  icon: iconCycle[i % iconCycle.length],
  // Podrías crear keys específicas si luego ampliás el i18n, aquí usamos solo fallbacks
  titleFallback: p,
  descFallback: "" // Si luego sumás descripciones, podés completar aquí o con descKey
}));

// 3) Estructura solicitada (manteniendo props y fallbacks)
const defaultItems: Item[] = mappedItems.length
  ? mappedItems
  : [
      {
        icon: "compass",
        titleKey: "home.training.items.0.title",
        titleFallback: "Cursos recientes disponibles para ti",
        descKey: "home.training.items.0.desc",
        descFallback: "Explora nuestros cursos y comienza tu viaje.",
      },
      {
        icon: "bars",
        titleKey: "home.training.items.1.title",
        titleFallback: "Aprende sobre IA y ciberseguridad",
        descKey: "home.training.items.1.desc",
        descFallback: "Desarrolla habilidades que transforman realidades.",
      },
      {
        icon: "chain",
        titleKey: "home.training.items.2.title",
        titleFallback: "Conviértete en un líder digital hoy",
        descKey: "home.training.items.2.desc",
        descFallback: "Inscríbete y comienza a aprender ahora.",
      },
    ];

const {
  lang = "es",
  dict,
  sectionId = "observabilidad-problemas",
  // Podés crear esta key en i18n si querés un overline propio
  overlineKey = "solutions.observability.problems.overline",
  // Usamos el heading de Observabilidad
  titleKey = "solutions.observability.problems.heading",
  // Lead opcional; si no existe en i18n cae en el fallback
  leadKey = "solutions.observability.problems.lead",
  items = defaultItems,
  // CTA opcional; por defecto a contacto en el idioma actual
  ctaHref = `/${lang}/contacto/`,
  ctaKey = "solutions.observability.problems.cta",
} = Astro.props as Props;

const t = (k: string, fb?: string) => getTrans(dict, k, fb);
---

<section id={sectionId} class="py-12 md:py-16">
  <div class="container mx-auto max-w-7xl px-4">
    <div class="grid gap-6 md:grid-cols-2 lg:gap-16">
      <div>
        <p class="text-sm font-semibold text-neutral-500">
          {t(overlineKey, "Observabilidad")}
        </p>
        <h2 class="mt-2 max-w-2xl text-3xl sm:text-4xl lg:text-5xl font-extrabold leading-tight tracking-tight">
          {t(titleKey, "Problema central")}
        </h2>
      </div>

      <p class="text-neutral-600 max-w-xl">
        {t(
          leadKey,
          "Detectamos las barreras que limitan la visibilidad, el cumplimiento y la integración de datos para habilitar decisiones informadas y auditorías confiables."
        )}
      </p>
    </div>

    <div class="mt-10 grid gap-10 md:grid-cols-3">
      {items.map((it: Item) => (
        <article>
          <div class="icon-box">
            {it.icon === "compass" && (
              <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                <circle cx="12" cy="12" r="9"></circle>
                <path d="m14.5 9.5-3.8 1.5-1.2 3.8 3.8-1.5z"></path>
              </svg>
            )}
            {it.icon === "bars" && (
              <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                <rect x="4" y="10" width="3" height="8"></rect>
                <rect x="10.5" y="6" width="3" height="12"></rect>
                <rect x="17" y="12" width="3" height="6"></rect>
                <rect x="3" y="4" width="6" height="3" rx="1"></rect>
              </svg>
            )}
            {it.icon === "chain" && (
              <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                <path d="M10.5 13.5 8 16a4 4 0 1 1-5.7-5.7l2.5-2.5a4 4 0 0 1 5.7 0"></path>
                <path d="M13.5 10.5 16 8a4 4 0 0 1 5.7 5.7l-2.5 2.5a4 4 0 0 1-5.7 0"></path>
              </svg>
            )}
          </div>

          <h3 class="mt-5 text-2xl font-extrabold leading-tight">
            {t(it.titleKey ?? "", it.titleFallback)}
          </h3>
          <p class="mt-2 text-sm text-neutral-600">
            {t(it.descKey ?? "", it.descFallback)}
          </p>
        </article>
      ))}
    </div>

    <div class="mt-10 flex flex-wrap gap-3">
      <a href={ctaHref} class="link-arrow group">
        {t(ctaKey, "Conversemos cómo resolverlo")}
        <svg class="h-4 w-4 transition-transform group-hover:translate-x-0.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
    </div>
  </div>
</section>
