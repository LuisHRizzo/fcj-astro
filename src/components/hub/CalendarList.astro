---
type Item = { date: string; title: string; areas?: string[]; href?: string };
const { heading = "", areasLabel = "Áreas", applyLabel = "Postular", pastToggle = "Ver pasadas", items = [] } =
  Astro.props as { heading?: string; areasLabel?: string; applyLabel?: string; pastToggle?: string; items: Item[] };

const parsed = items
  .map((x) => ({ ...x, ts: Date.parse(x.date) }))
  .filter((x) => !Number.isNaN(x.ts))
  .sort((a, b) => a.ts - b.ts);
---

<section class="py-10 md:py-12 bg-white">
  <div class="container mx-auto max-w-7xl px-4">
    {heading && <h2 class="text-2xl sm:text-3xl font-extrabold tracking-tight">{heading}</h2>}

    <div class="mt-4">
      <button id="togglePast" class="text-sm underline decoration-neutral-300 hover:decoration-neutral-600">
        {pastToggle}
      </button>
    </div>

    <ul id="calList" class="mt-6 space-y-3" data-show-past="false">
      {parsed.map((it) => (
        <li class="rounded-xl border p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3"
            data-ts={it.ts}>
          <div>
            <time datetime={it.date} class="text-sm text-neutral-500 block">
              {new Date(it.ts).toLocaleDateString('es-AR', { year:'numeric', month:'long', day:'numeric' })}
            </time>
            <div class="mt-1 font-semibold">{it.title}</div>
            {it.areas?.length && (
              <div class="mt-1 text-xs text-neutral-600">
                <span class="font-medium">{areasLabel}:</span> {it.areas.join(' · ')}
              </div>
            )}
          </div>
          {it.href && (
            <a href={it.href} class="btn btn-outline self-start sm:self-auto">{applyLabel}</a>
          )}
        </li>
      ))}
    </ul>
  </div>

  <script is:inline>
    (() => {
      const list = document.getElementById('calList');
      const btn  = document.getElementById('togglePast');
      if (!list || !btn) return;

      const now = Date.now();
      const items = Array.from(list.querySelectorAll('li'));
      const sync = () => {
        const showPast = list.getAttribute('data-show-past') === 'true';
        items.forEach(li => {
          const ts = Number(li.getAttribute('data-ts') || 0);
          const isPast = ts < now;
          li.style.display = showPast ? '' : (isPast ? 'none' : '');
        });
      };
      btn.addEventListener('click', () => {
        const v = list.getAttribute('data-show-past') === 'true';
        list.setAttribute('data-show-past', String(!v));
        sync();
      });
      sync();
    })();
  </script>
</section>
